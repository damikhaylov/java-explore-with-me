CREATE TABLE IF NOT EXISTS users
(
    id    INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name  VARCHAR(255)                         NOT NULL UNIQUE,
    email VARCHAR(128)                         NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS categories
(
    id   INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name VARCHAR(255)                         NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS events
(
    id                 INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    title              VARCHAR(120)                         NOT NULL,
    annotation         VARCHAR(2000)                        NOT NULL,
    description        VARCHAR(7000)                        NOT NULL,
    category_id        INT REFERENCES categories (id) ON DELETE RESTRICT,
    event_date         TIMESTAMP                            NOT NULL,
    latitude           float                                NOT NULL,
    longitude          float                                NOT NULL,
    paid               BOOLEAN,
    participant_limit  INT,
    request_moderation BOOLEAN,
    initiator_id       INT REFERENCES users (id) ON DELETE RESTRICT,
    state              varchar(20)                          NOT NULL,
    created            TIMESTAMP                            NOT NULL,
    published          TIMESTAMP
);

CREATE TABLE IF NOT EXISTS requests
(
    id           INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    event_id     INT REFERENCES events (id) ON DELETE CASCADE,
    requester_id INT REFERENCES users (id) ON DELETE CASCADE,
    created      TIMESTAMP                            NOT NULL,
    status       varchar(20)                          NOT NULL
);

CREATE TABLE IF NOT EXISTS compilations
(
    id     INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    title  VARCHAR(120)                         NOT NULL,
    pinned BOOLEAN DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS compilation_events
(
    compilation_id INT REFERENCES compilations (id) ON DELETE CASCADE,
    event_id       INT REFERENCES events (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS locations
(
    id        INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
    name      VARCHAR(255)                         NOT NULL,
    latitude  float                                NOT NULL,
    longitude float                                NOT NULL,
    radius    float                                NOT NULL
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
    declare
        dist      float = 0;
        rad_lat1  float;
        rad_lat2  float;
        theta     float;
        rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
        THEN
            RETURN dist;
        ELSE
            -- переводим градусы широты в радианы
            rad_lat1 = pi() * lat1 / 180;
            -- переводим градусы долготы в радианы
            rad_lat2 = pi() * lat2 / 180;
            -- находим разность долгот
            theta = lon1 - lon2;
            -- переводим градусы в радианы
            rad_theta = pi() * theta / 180;
            -- находим длину ортодромии
            dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

            IF dist > 1
            THEN
                dist = 1;
            END IF;

            dist = acos(dist);
            -- переводим радианы в градусы
            dist = dist * 180 / pi();
            -- переводим градусы в километры
            dist = dist * 60 * 1.8524;

            RETURN dist;
        END IF;
    END;
'
    LANGUAGE PLPGSQL;